<div
    style="background-image: linear-gradient(rgba(0, 0, 0, 0.5),rgba(0, 0, 0, 0.5)), url('images/bg.jpg'); background-size: cover;">
    <div class="container py-4">
        <div class="row row-cols-1 row-cols-md-3 g-4">
            {{#each shops}}
            <div class="col">
                <div class="card">
                    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRgrSdDay8MfZclg8H1yKOS6q1WWfHN5dVPsQ&usqp=CAU"
                        class="card-img-top" alt="...">
                    <div class="card-body">
                        <h5 class="card-title text-center text-uppercase fw-bold">{{this.ShopName}}</h5>
                        <p class="card-text text-center fs-6">
                            {{this.Street}}, {{this.Barangay}}, {{this.City}}
                            {{this.ShopContact}}
                        </p>
                    </div>
                    <div class="d-grid ">
                        <button type="button" class="btn btn-sm btn-warning btn-block fw-bold p-2"
                            onclick="toggleDialog('addAppointment{{this.ShopID}}')"> SET APPOINTMENT </button>
                    </div>
                </div>
            </div>
            <div id="addAppointment{{this.ShopID}}" class="dialog bg-yellow m-auto" style="display: none;">
                <div>
                    <div class="card p-4 bg-black">
                        <div class="text-center">
                            <h6 class="fw-800"> ADD APPOINTMENT </h6>
                            <hr>
                        </div>
                        <div class="center-div pt-2">
                            <div>
                                <form action="/customerOnline" id="addCustomerAppointmentForm{{this.ShopID}}"
                                    method="POST">
                                    {{!-- SHOP DETAILS --}}
                                    <fieldset style="border: 1px solid white; padding: 0 1rem .5rem 1rem" class="mb-2">
                                        <legend
                                            style="font-size: .9rem; background-color:none; float:none; width:fit-content;">
                                            SHOP NAME:
                                        </legend>

                                        <input type="text" name="shop" id="shop" value="{{this.ShopID}}"
                                            style="display: none">
                                        <input type="text"
                                            class="form-control form-control-sm mb-2 font-small rounded-0"
                                            value="{{this.ShopName}}">
                                        <input type="text"
                                            class="form-control form-control-sm mb-2 font-small rounded-0" name="name"
                                            id="name" placeholder="Name" required>
                                    </fieldset>

                                    {{!-- SERVICE DETAILS --}}
                                    <fieldset style="border: 1px solid white; padding: 0 1rem .5rem 1rem" class="mb-2">
                                        <legend
                                            style="font-size: .9rem; background-color:none; float:none; width:fit-content;">
                                            SERVICE DETAILS:
                                        </legend>
                                        <select class="form-control form-control-sm mb-2 font-small rounded-0"
                                            name="category" id="category" onchange="changeCustomerApptServices(this)">
                                            <option selected disabled hidden>Category</option>
                                            {{#each ../rowsCategory}}
                                            <option value="{{this.CategoryID}}">{{this.Name}}</option>
                                            {{/each}}
                                        </select>
                                        <select class="form-control form-control-sm mb-2 font-small rounded-0"
                                            name="service" id="customerService"
                                            onchange="changeEmployee(this, 'customerAttendingEmp')">
                                            <option selected disabled hidden>Service</option>
                                        </select>
                                        {{!-- <input class="form-control form-control-sm mb-2 font-small rounded-0"
                                            name="price" type="text" 23qwplaceholder="Price" style="width: 300px;"> --}}
                                    </fieldset>

                                    {{!-- WHO AND WHEN --}}
                                    <fieldset style="border: 1px solid white; padding: 0 1rem .5rem 1rem" class="mb-2">
                                        <legend
                                            style="font-size: .9rem; background-color:none; float:none; width:fit-content;">
                                            APPOINTMENT DETAILS:
                                        </legend>
                                        <select class="form-control form-control-sm mb-2 font-small rounded-0"
                                            id="customerAttendingEmp" name="employee">
                                            <option selected disabled hidden>Attending Employee</option>
                                            {{#each rowsEmployee}}
                                            {{#if (isBarber EmployeeTypeID)}}
                                            <option value="{{this.EmployeeID}}">{{this.FullName}}</option>
                                            {{/if}}
                                            {{/each}}
                                        </select>
                                        <input class="form-control form-control-sm mb-2 font-small rounded-0"
                                            name="date" id="customerApptDate" type="date" placeholder="Date"
                                            style="width: 300px;">
                                        <input name="time" id="customerAppointmentTime" style="width: 300px;">
                                    </fieldset>
                                    <div class="m-auto center-div pt-2" style="width: 300px;">
                                        <button class="btn btn-warning col-6 rounded-0 me-1 fw-800"
                                            onclick="document.getElementById('addCustomerAppointmentForm{{this.ShopID}}').submit()">
                                            <small>SAVE</small></button>
                                        <button class="btn btn-outline-warning col-6 rounded-0 fw-800"
                                            onclick="toggleDialog('addAppointment{{this.ShopID}}')" type="button"
                                            id="btnCancel">
                                            <small>CANCEL</small></button>
                                    </div>
                                </form>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            {{/each}}
        </div>
    </div>
</div>

<script>
    function changeCustomerApptServices(el) {
        var shopId = $("#shop").val();
        var category = el.value;
        var service = document.getElementById("customerService");
        var services = [];
        fetch("/getInfo/shopservicesview")
            .then((res) => res.json())
            .then((data) => {
                console.log(data)
                for (var i = 0; i < data.length; i++) {
                    if (data[i].CategoryID == category && data[i].shopID == shopId) {
                        services.push(data[i]);
                    }
                }
            })
            .then((data) => {
                var serviceOptions =
                    "<option hidden disabled selected>Service</option>";
                for (var i = 0; i < services.length; i++) {
                    serviceOptions +=
                        "<option value=" +
                        services[i].ID +
                        "> " +
                        services[i].Service +
                        " </option>";
                }
                service.innerHTML = serviceOptions;
            });
    }

    function changeEmployee(el, id) {
        var employee = document.getElementById(id);
        var ableEmployees = [];
        var shopId = $("#shop").val();
        fetch("/getInfo/employeeSpecialization")
            .then((res) => res.json())
            .then((data) => {
                console.log(data)
                for (var i = 0; i < data.length; i++) {
                    console.log(data[i].ShopServicesID, el.value)
                    if (data[i].ShopServicesID == el.value && data[i].Status == 1) {
                        ableEmployees.push(data[i]);
                    }
                }
                console.log(ableEmployees);
            })
            .then((data) => {
                var empOptions = "<option hidden disabled selected>Employee</option>";
                ableEmployees.forEach((element) => {
                    empOptions +=
                        "<option value=" +
                        element.EmployeeID +
                        "> " +
                        element.Name +
                        " </option>";
                });
                employee.innerHTML = empOptions;
            });
    }

    //FOR FLATPICKR -- For changing enabled dates per employee
    //get select element that holds the barber list
    const customerAttendingEmp = document.querySelector("#customerAttendingEmp");

    //Listens to attendingEmp
    customerAttendingEmp.onchange = function () {
        const employee = customerAttendingEmp.value;
        updateDatePicker(employee);
    };

    function updateDatePicker(employee) {
        var days = [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
        ];
        var nonWorkingDays = [];
        var nwdNumberForm = [];
        var scheduleData, appointments, shopservices;

        fetch("/getInfo/shopservices")
            .then((res) => res.json())
            .then((data) => {
                shopservices = data;
            });

        fetch("/getInfo/appointmentviews")
            .then((res) => res.json())
            .then((data) => {
                appointments = data;
            });

        //get nonworking days
        fetch("/getInfo/schedule")
            .then((res) => res.json())
            .then((data) => {
                scheduleData = data;
                for (var i = 0; i < data.length; i++) {
                    if (data[i].EmployeeID == employee && data[i].TimeIn == null) {
                        nonWorkingDays.push(data[i].Date);
                    }
                }
            })
            //get non working days index for flatpicker
            .then((data) => {
                for (var i = 0; i < nonWorkingDays.length; i++) {
                    if (days.includes(nonWorkingDays[i])) {
                        nwdNumberForm.push(days.indexOf(nonWorkingDays[i]));
                    }
                }
            })
            //initializes datepicker with dynamic disabled days
            .then((data) => {
                const myInput = document.querySelector("#customerApptDate");
                const fp = flatpickr(myInput, {
                    disable: [
                        function (date) {
                            return nwdNumberForm.includes(date.getDay());
                        },
                    ],
                    onChange: function (selectedDates, dateStr, instance) {
                        //1. get date
                        var day = selectedDates[0].getDay();
                        //2. get occupied time of chosen date
                        var occupiedTimeSlot = [];
                        for (var i = 0; i < appointments.length; i++) {
                            //check if the appt is of the chosen employee
                            if (appointments[i].EmployeeID == employee && appointments[i].AppointmentStatus == 'Approved') {
                                //check if the appt is of the same date
                                var newDate = new Date(appointments[i].Date);
                                var date = newDate.getDate();
                                if (date < 10) {
                                    date = '0' + date;
                                }
                                var currentDate =
                                    newDate.getFullYear() +
                                    "-" +
                                    (newDate.getMonth() + 1) +
                                    "-" +
                                    date;
                                if (currentDate == dateStr) {
                                    occupiedTimeSlot.push([
                                        appointments[i].TimeIn,
                                        appointments[i].TimeOut,
                                    ]);
                                }
                            }
                        }
                        //3. get schedule of chosen date
                        //---select timeIn and timeOut from tblsched where empId = employee
                        var daySchedTimeIn, daySchedTimeOut;
                        for (var i = 0; i < scheduleData.length; i++) {
                            //check that the schedule to be returned is of the chosen employee
                            if (scheduleData[i].EmployeeID == employee) {
                                //chech if the returned sched must be the same as the day
                                var a = scheduleData[i].Date;
                                var dayIndex = days.indexOf(a);
                                if (dayIndex == day) {
                                    daySchedTimeIn = scheduleData[i].TimeIn;
                                    daySchedTimeOut = scheduleData[i].TimeOut;
                                    console.log(daySchedTimeOut + " " + daySchedTimeIn);
                                }
                            }
                        }
                        //4. get chosen service and duration
                        var shopId = $("#shop").val();
                        var serviceId = document.getElementById("customerService").value;
                        var duration = 0;
                        for (var i = 0; i < shopservices.length; i++) {
                            if (
                                shopservices[i].shopServicesID == serviceId
                            ) {
                                duration = shopservices[i].Duration;
                            }
                        }
                        $("#customerAppointmentTime").timepicker({
                            minTime: daySchedTimeIn,
                            maxTime: daySchedTimeOut,
                            disableTimeRanges: occupiedTimeSlot,
                            step: duration,
                            disableTextInput: true,
                            timeFormat: "H:i:s",
                        });
                    },
                });
            });
    }
</script>

<script src="/socket.io/socket.io.js"></script>
<script>
    var socket = io();
    //var btnCancel = document.getElementById('btnCancel')
    var shopID = document.getElementById('shop').value;
    var form = document.getElementById('addCustomerAppointmentForm' + shopID);
    form.addEventListener('submit', function (e) {
        e.preventDefault();
        socket.emit('message', 'An appointment has been added!', shopID)
    });
</script>